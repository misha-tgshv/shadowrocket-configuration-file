name: Generate shadowrocket rules

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main

jobs:
  build_rules_list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Устанавливаем необходимые утилиты
        run: |
          sudo apt-get update
          sudo apt-get install -y dnsutils

      - name: Резолвим домены и преобразуем в IP-CIDR
        run: |
          # Список доменов для резолвинга
          domains=(
            "deepmind.com"
            "deepmind.google"
            "geller-pa.googleapis.com"
            "generativelanguage.googleapis.com"
            "proactivebackend-pa.googleapis.com"
            "ai.google.dev"
            "alkalicore-pa.clients6.google.com"
            "alkalimakersuite-pa.clients6.google.com"
            "generativeai.google"
            "makersuite.google.com"
            "aistudio.google.com"
            "bard.google.com"
            "emini.google.com"
          )

          # Файл для сохранения результата
          output_file="ips_resolved_cidr.list"

          # Очистка файла перед началом
          echo "# Список IP-CIDR, разрешенных из доменов" > "$output_file"

          # Резолвинг доменов и преобразование в CIDR
          for domain in "${domains[@]}"; do
            ips=$(dig +short "$domain" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
            if [ -n "$ips" ]; then
              for ip in $ips; do
                # Преобразуем IP в CIDR (/32 для одиночного IP)
                echo "IP-CIDR,$ip/32" >> "$output_file"
              done
            else
              echo "# $domain: Не удалось разрешить IP" >> "$output_file"
            fi
          done

          echo "Резолвинг и преобразование завершены. Результаты сохранены в $output_file"
          cat "$output_file"

      - name: Создаем файл domains_community.list
        run: |
          curl -s https://raw.githubusercontent.com/misha-tgshv/shadowrocket-configuration-file/main/community.list \
            | awk '
              /^#gemini/ {print "DOMAIN-KEYWORD," substr($0, 2); next}
              NR==2 {print "DOMAIN-KEYWORD," $0; next}
              NR==3 {print "DOMAIN-KEYWORD," $0; next}
              NR==4 {print "DOMAIN," $0; next}
              NR==5 {print "DOMAIN," $0; next}
              !/^#/ && NF>0 {print "DOMAIN-SUFFIX," $0}
              /^#/ || NF==0 {print $0} # Добавляем это условие для пустых строк и строк с #
            ' > domains_community.list

      - name: Создаем файл domains_antifilter.list
        run: |
          curl -sSL https://community.antifilter.download/list/domains.lst \
            | sed -E 's/^\+\./DOMAIN-SUFFIX,/; s/^[^D]/DOMAIN-SUFFIX,&/' \
            | sed '/www|spotify.com/d' \
            | awk '!seen[$0]++' > temp_list.txt \
          && echo "# Количество доменов: $(wc -l < temp_list.txt)" > domains_antifilter.list \
          && cat temp_list.txt >> domains_antifilter.list \
          && rm temp_list.txt

      - name: Создаем файл ips_antifilter.list
        run: |
          curl -s https://community.antifilter.download/list/community.lst \
            | sed 's/^/IP-CIDR,/g' \
            | sort -u > temp_aips.txt \
          && echo "# Количество IP-адресов: $(wc -l < temp_aips.txt)" > ips_antifilter.list \
          && cat temp_aips.txt >> ips_antifilter.list \
          && rm temp_aips.txt

      - name: Создаем файл domains_refilter.list
        run: |
          curl -s https://raw.githubusercontent.com/1andrevich/Re-filter-lists/main/community.lst > temp.txt &&
          curl -s https://raw.githubusercontent.com/1andrevich/Re-filter-lists/main/domains_all.lst >> temp.txt &&
          grep -v "mega555" temp.txt > temp2.txt &&
          grep -v "spotify.com" temp2.txt > temp3.txt &&
          rm temp.txt temp2.txt

          echo "# NAME: domains_refilter.list" > domains_refilter.list &&
          echo "# AUTHOR: misha-tgshv" >> domains_refilter.list &&
          echo "# REPO: https://github.com/misha-tgshv/shadowrocket-configuration-file" >> domains_refilter.list &&
          echo "# UPDATED: $(TZ='Europe/Moscow' date '+%Y-%m-%d %H:%M:%S') MSK" >> domains_refilter.list &&
          echo "# SOURCE: https://github.com/1andrevich/Re-filter-lists" >> domains_refilter.list

          sed 's/^/DOMAIN-SUFFIX,/g' temp3.txt | tee domaintmp
          wc -l < domaintmp | awk '{print "# TOTAL:", $1}' >> domains_refilter.list
          cat domaintmp >> domains_refilter.list && rm domaintmp temp3.txt

      - name: Создаем файл domains_youtube.list
        run: |
          curl -sSL https://raw.githubusercontent.com/dsvip/Quantumult-X/dec9019816ba55897c162c3dbd3ac997ac160f09/blackmatrix7/rule/Shadowrocket/YouTube.list \
          | sed -n '/DOMAIN-SUFFIX,/p' > domains_youtube.list
          sed -i "1s/^/DOMAIN-KEYWORD,youtube\n/" domains_youtube.list
          sed -i "1s/^/DOMAIN-KEYWORD,googlevideo\n/" domains_youtube.list

      - name: Создаем файл domains_discord.list
        run: |
          curl -sSL https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Shadowrocket/Discord/Discord.list \
          | sed -n '/DOMAIN-SUFFIX,/p' > domains_discord.list
          sed -i "1s/^/DOMAIN-KEYWORD,discord\n/" domains_discord.list
          sed -i "1s/^/DOMAIN-KEYWORD,discordapp\n/" domains_discord.list

      - name: Создаем файл ips_refilter.list
        run: |
          curl -s https://raw.githubusercontent.com/1andrevich/Re-filter-lists/refs/heads/main/community_ips.lst > ips1.txt \
          && curl -s https://raw.githubusercontent.com/1andrevich/Re-filter-lists/refs/heads/main/discord_ips.lst >> ips1.txt \
          && curl -s https://raw.githubusercontent.com/1andrevich/Re-filter-lists/refs/heads/main/ipsum.lst >> ips1.txt \
          && grep -vE '([0-9]+\.[0-9]+\.[0-9]+)\.0/[0-9]+' ips1.txt | sed 's/^/IP-CIDR,/g' | sort -u > temp_ips.list \
          && echo "# Количество IP-адресов: $(wc -l < temp_ips.list)" > ips_refilter.list \
          && cat temp_ips.list >> ips_refilter.list \
          && rm ips1.txt temp_ips.list

      - name: Создаем файл domains_banking.list
        run: |
          curl -s https://www.cbr.ru/banking_sector/credit/cowebsites/ | \
          grep -oP 'href="\K[^"]+' | \
          grep '^http' | \
          sed -E '/(t\.me|vk\.com|ok\.ru|telegram|dzen|twitter|youtube|zen\.yandex\.ru|rutube\.ru|linkedin)/d' | \
          sed 's/^https\?:\/\///' | \
          sed 's/\/.*//' | \
          sort -u | sed 's/^/DOMAIN-SUFFIX,/' > domains_banking.list

      - name: Сохраняем все листы правил как артефакты
        run: |
          mkdir -p rules
          mv *.list ./rules/
          echo "FILES=$(ls -A rules)" >> $GITHUB_ENV

      - name: Загружаем список файлов rules через artifact
        uses: actions/upload-artifact@v4
        with:
          name: rules
          path: ./rules

  build_scripts_js:
    runs-on: ubuntu-latest
    steps:
      - name: Создаем файл rewrite.youtube.response.preview.js
        run: |
          curl -sSL "https://raw.githubusercontent.com/Maasea/sgmodule/refs/heads/master/Script/Youtube/youtube.response.js" > temp.txt && sed 's/;e!/;e/g' temp.txt > rewrite.youtube.response.preview.js && rm temp.txt

      - name: Перемещаем файлы в директорию scripts
        run: |
          mkdir -p scripts.d
          cp *.js ./scripts.d/

      - name: Загружаем список файлов sctipts через artifact
        uses: actions/upload-artifact@v4
        with:
          name: scripts
          path: ./scripts.d/

  build_YT_premium_v1_module:
    runs-on: ubuntu-latest
    steps:
      - name: Создаем файл YT-Premium-V1-RU.module
        run: |
          # Скачиваем исходный модуль
          curl -sSL https://raw.githubusercontent.com/YanbingJiang/Shadowrocket_diy_rules/9b86dfbca387fa69e8d4b02d3f8ba01250eaad16/Modules/YT-Premium-V1.module \
          | sed -E 's/captionLang:zh-Hans/captionLang:off/g; s/lyricLang:zh-Hans/lyricLang:ru-ru/g' > YT-Premium-V1-RU.module
          # Заменяем URL в строке youtube.response
          sed -i 's|https://raw\.githubusercontent\.com/Maasea/sgmodule/master/Script/Youtube/dist/youtube\.response\.preview\.js|https://raw.githubusercontent.com/misha-tgshv/shadowrocket-configuration-file/refs/heads/release/scripts/rewrite.youtube.response.preview.js|g' YT-Premium-V1-RU.module

      - name: Перемещаем файлы в директорию modules
        run: |
          mkdir -p modules.d
          cp *.module ./modules.d/

      - name: Загружаем список файлов modules через artifact
        uses: actions/upload-artifact@v4
        with:
          name: modules
          path: ./modules.d/

  build_Shadowrocket_conf_file:
    runs-on: ubuntu-latest
    needs: [build_rules_list]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Устанавливаем необходимые утилиты
        run: |
          sudo apt-get update
          sudo apt-get install -y dnsutils

      - name: Скачиваем все листы правил
        uses: actions/download-artifact@v4
        with:
          name: rules
          path: ./rules

      - name: Создаем папку
        run: |
          mkdir -p conf.d
      - name: Получаем шаблон файла General
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: 'Custom'
          token: ${{ secrets.GITHUB_TOKEN }}
          sparse-checkout: |
            General.txt
          sparse-checkout-cone-mode: false
          path: conf.d

      - name: Создаем конфиг sr_ru_public_lists.conf
        run: |
          # Копируем General.txt в sr_ru_public_lists.conf
          cp ./conf.d/General.txt ./conf.d/sr_ru_public_lists.conf
          # Добавляем правила в sr_ru_public_lists.conf
          echo "" >> ./conf.d/sr_ru_public_lists.conf
          echo "[Rule]" >> ./conf.d/sr_ru_public_lists.conf
          echo "RULE-SET,https://raw.githubusercontent.com/misha-tgshv/shadowrocket-configuration-file/refs/heads/release/rules/domains_community.list,PROXY" >> ./conf.d/sr_ru_public_lists.conf
          echo "RULE-SET,https://raw.githubusercontent.com/misha-tgshv/shadowrocket-configuration-file/refs/heads/release/rules/domains_refilter.list,PROXY" >> ./conf.d/sr_ru_public_lists.conf
          echo "RULE-SET,https://raw.githubusercontent.com/misha-tgshv/shadowrocket-configuration-file/refs/heads/release/rules/ips_refilter.list,PROXY,no-resolve" >> ./conf.d/sr_ru_public_lists.conf
          echo "RULE-SET,./rules/ips_resolved_cidr.list,PROXY,no-resolve" >> ./conf.d/sr_ru_public_lists.conf
          echo "RULE-SET,https://raw.githubusercontent.com/misha-tgshv/shadowrocket-configuration-file/refs/heads/release/rules/domains_discord.list,PROXY" >> ./conf.d/sr_ru_public_lists.conf
          echo "FINAL,DIRECT" >> ./conf.d/sr_ru_public_lists.conf
          # Добавляем дату сборки
          sed -i "1s/^/# @misha-tgshv, built on $(TZ="Asia/Novokuznetsk" date)\n/" ./conf.d/sr_ru_public_lists.conf
      - name: Создаем конфиг sr_basic_nonru.conf
        run: |
          # Копируем General.txt в sr_basic_nonru.conf
          cp ./conf.d/General.txt ./conf.d/sr_basic_nonru.conf
          # Добавляем правила для российских доменов в sr_basic_nonru.conf
          cat <<EOF >> ./conf.d/sr_basic_nonru.conf
          # Выборочные правила маршрутизации
          [Rule]
          # Российские домены через прокси
          DOMAIN-SUFFIX,ru,PROXY
          DOMAIN-SUFFIX,su,PROXY
          DOMAIN-SUFFIX,рф,PROXY
          DOMAIN-KEYWORD,.ru,PROXY
          DOMAIN-KEYWORD,.su,PROXY
          DOMAIN-KEYWORD,.рф,PROXY
          # Финальное правило: все остальное напрямую
          FINAL,DIRECT
          EOF
          # Добавляем дату сборки
          sed -i "1s/^/# @misha-tgshv, built on $(TZ="Asia/Novokuznetsk" date)\n/" ./conf.d/sr_basic_nonru.conf
      - name: Заменяем update-url в sr_basic_nonru.conf
        run: |
          sed -i 's/update-url = https:\/\/cdn\.jsdelivr\.net\/gh\/misha-tgshv\/shadowrocket-configuration-file@release\/conf\/sr_ru_public_lists\.conf/update-url = https:\/\/cdn\.jsdelivr\.net\/gh\/misha-tgshv\/shadowrocket-configuration-file@release\/conf\/sr_basic_nonru\.conf/g' ./conf.d/sr_basic_nonru.conf
      - name: Удаляем временный General.txt
        run: rm -f ./conf.d/General.txt

      - name: Загружаем конфиги в artifacts
        uses: actions/upload-artifact@v4
        with:
          name: conf
          path: |
            ./conf.d/sr_ru_public_lists.conf
            ./conf.d/sr_basic_nonru.conf
          retention-days: 1

  publish:
    runs-on: ubuntu-latest
    needs: [build_rules_list, build_scripts_js, build_YT_premium_v1_module, build_Shadowrocket_conf_file]
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Настраиваем переменные
        run: |
          echo "RELEASE_NAME=Built on $(TZ="Asia/Novokuznetsk" date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ="Asia/Novokuznetsk" date +%Y%m%d%H%M)" >> $GITHUB_ENV
          mkdir -p rules

      - name: Скачиваем artifact
        uses: actions/download-artifact@v4
        with:
          name: rules
          path: ./rules

      - name: Коммит и пуш изменений
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "Update rules [$(date '+%Y-%m-%d %H:%M:%S')]"
          git push origin main -f

      - name: Создаем и публикуем релиз
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          files: |
            ./rules/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Очищаем jsdelivr CDN
        run: |
          cd rules || exit 1
          for file in $(ls); do
            echo "Очищаем кэш для файла: $file"
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done
          # Ждем 5 минут перед повторной очисткой
          echo "Ожидание 5 минут перед повторной очисткой кэша..."
          sleep 300
          # Повторная очистка кэша
          for file in $(ls); do
            echo "Очищаем кэш для файла: $file"
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done
  Delete_Historical_Data:
    runs-on: ubuntu-latest
    needs: publish
    steps:
        - name: Delete old artifacts
          uses: geekyeggo/delete-artifact@v5
          with:
            name: |
                rules
                conf
        - name: Удаляем старые теги и релизы
          uses: dev-drprasad/delete-older-releases@v0.3.4
          with:
            keep_latest: 3
            delete_expired_data: 7
            delete_tags: true
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Удаляем старый workflow
          uses: Mattraks/delete-workflow-runs@v2
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            repository: ${{ github.repository }}
            retain_days: 7
            keep_minimum_runs: 3
